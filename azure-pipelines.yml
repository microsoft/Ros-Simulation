# Build a Docker image
# Build a Docker image to run, deploy, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/docker

name: Ros-Simulation-CI

queue: 'Hosted Ubuntu 1604'

trigger:
  branches:
    include:
    - master

variables:
  simulatorBaseImageName: 'argos-base'
  simulatorImageName: 'simulator'
  robotImageName: 'robot'

steps:
- script: docker build -f ./argos/Dockerfile -t $(simulatorBaseImageName) .
  displayName: 'docker build $(simulatorBaseImageName)'

- script: docker build -f ./Dockerfile-argos -t $(registry)/$(simulatorImageName) .
  displayName: 'docker build $(simulatorImageName)'

- script: docker build -f ./Dockerfile-robot -t $(registry)/$(robotImageName) .
  displayName: 'docker build $(robotImageName)'

- script: |
    docker login $(registry) -u $(registry-username) -p $(registry-password)
    docker push $(registry)/$(simulatorImageName):$(build.buildId)
    docker push $(registry)/$(simulatorImageName):latest
  displayName: 'docker push $(registry)/$(simulatorImageName)'

- script: |
    docker login $(registry) -u $(registry-username) -p $(registry-password)
    docker push $(registry)/$(robotImageName):$(build.buildId)
    docker push $(registry)/$(robotImageName):latest
  displayName: 'docker push $(registry)/$(robotImageName)'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    contents: 'helm/**' 
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    cleanTargetFolder: true

- task: PublishBuildArtifacts@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'drop'